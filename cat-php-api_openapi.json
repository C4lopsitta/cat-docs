{
	"openapi": "3.0.2",
	"info": {
		"title": "Kittens API",
		"version": "1.0",
		"license": {
			"name": "GNU GPLv3",
			"url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
		},
		"description": "An API to buy, sell and manage Kittens."
	},
	"servers": [
		{
			"url": "https://api.kittens.robaldo.dev/"
		}
	],
	"paths": {
		"/api/v1/users": {
			"get": {
				"description": "List users without private information",
				"responses": {
					"200": {
						"description": "A list of all users",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/User"
									}
								}
							}
						}
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			}
		},
		"/api/v1/users/register": {
			"post": {
				"description": "Create a new user",
				"requestBody": {
					"description": "The new user's details",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRegistration"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "Registration has been accepted but has yet to be completed by the user through the appropriate email link.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserRegistrationAccepted"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Check if your request was formatted correctly and that all the fields match"
					},
					"401": {
						"description": "The given email address is already in use."
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			}
		},
		"/": {
			"get": {
				"description": "Get one or all cats",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "The Cat's Database ID",
						"required": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Found matching Cat relative to ID or all cats if no ID was provided",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/CatWithId"
											}
										},
										{
											"$ref": "#/components/schemas/CatWithId"
										}
									]
								}
							}
						}
					}
				}
			},
			"post": {
				"description": "Create a new Cat",
				"parameters": [
					{
						"in": "header",
						"name": "content-type",
						"description": "Request Content Type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["application/json"]
                        },
						"example": "application/json"
					}
				],
				"requestBody": {
					"description": "",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Cat"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Accepted new cat"
					}
				}
			},
			"put": {
				"description": "Update a Cat",
				"parameters": [
					{
						"in": "header",
						"name": "content-type",
						"description": "Request Content Type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["application/json"]
						},
						"example": "application/json"
					}
				],
				"requestBody": {
					"description": "",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CatWithId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Accepted modifications to cat"
					}
				}
			},
			"delete": {
				"description": "Delete a Cat",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "The Cat's Database ID",
						"required": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Deleted cat"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"User": {
				"properties": {
					"uid": {
						"type": "string",
						"description": "The user's Unique ID",
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					},
					"username": {
						"type": "string",
						"description": "The user's username. ",
						"example": "Bob"
					},
					"image": {
						"type": "string",
						"description": "The user's profile picture in base64 format.",
						"example": "base64 ........"
					},
					"imageMime": {
						"type": "string",
						"enum": ["image/jpeg", "image/png", "image/gif"],
						"description": "The user's profile picture mime type",
						"example": "image/gif"
					},
					"description": {
						"type": "string",
						"description": "The user's description. Can be empty",
						"example": "I'm bob and i love cats. I live in catworld and have 2^64 cats in my house. Their names are the fibonacci sequence. Except cat number 42 whose name is Megatron."
					},
					"pronouns": {
						"type": "string",
						"description": "The user's pronouns, can be empty.",
						"example": "hee/hee"
					},
					"cats": {
						"type": "array",
						"description": "The user's cats' UIDs. Can be empty.",
						"items": {
							"type": "string",
							"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
						}
					},
					"wishlist": {
						"type": "array",
						"description": "The user's wishlisted cats UIDs. Can be empty.",
						"items": {
							"type": "string",
							"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
						}
					}

				}
			},
			"UserRegistration": {
				"type": "object",
				"required": [
					"email", "username", "password"
				],
				"properties": {
					"email": {
						"type": "string",
						"description": "The email new user's email address.",
						"example": "bob@foo.bar"
					},
					"username": {
						"type": "string",
						"description": "The username. Must be composed only by lower and uppercase letters, numbers, dashes, underscores and spaces and not be longer than 64 characters.",
						"example": "Bob"
					},
					"password": {
						"type": "string",
						"description": "The user's password. Must follow the password requirements",
						"example": "Bob.Loves.Alice.42"
					},
					"emailConfirmationBaseUrl": {
						"type": "string",
						"description": "Intended for the frontend, it's the URL that will handle the registration confirmation. Remember that the query parameter confirmationId will be appended. Include protocol and path. If not given an api url will be given instead with a JSON response.",
						"example": "https://example.com/users/confirm"
					},
					"description": {
						"type": "string",
						"description": "The user's description. Can be empty",
						"example": "I'm bob and i love cats. I live in catworld and have 2^64 cats in my house. Their names are the fibonacci sequence. Except cat number 42 whose name is Megatron."
					},
					"pronouns": {
						"type": "string",
						"description": "The user's pronouns, can be empty.",
						"example": "hee/hee"
					}
				}
			},
			"UserRegistrationAccepted": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "The username",
						"example": "Bob"
					},
					"email": {
						"type": "string",
						"description": "The email at which the confirmation has been sent to.",
						"example": "bob@foo.bar"
					},
					"uid": {
						"type": "string",
						"description": "The new user's UID.",
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					}
				}
			},
			"CatWithId": {
				"type": "object",
				"properties": {
					"descr": {
						"type": "string",
						"example": "the father"
					},
					"id": {
						"type": "integer",
						"example": 1
					},
					"value": {
						"type": "integer",
						"example": 1000
					}
				},
				"example": {
					"descr": "the father",
					"id": 1,
					"value": 1000
				}
			},
			"Cat": {
				"type": "object",
				"properties": {
					"descr": {
						"type": "string",
						"example": "the father"
					},
					"value": {
						"type": "integer",
						"example": 1000
					}
				},
				"example": {
					"descr": "the father",
					"value": 1000
				}
			}
		}
	}
}
