{
	"openapi": "3.0.2",
	"info": {
		"title": "Kittens API",
		"version": "1.0",
		"license": {
			"name": "GNU GPLv3",
			"url": "https://www.gnu.org/licenses/gpl-3.0.en.html"
		},
		"description": "An API to buy, sell and manage Kittens."
	},
	"servers": [
		{
			"url": "https://api.kittens.robaldo.dev/"
		}
	],
	"paths": {
		"/api/v1/users": {
			"get": {
				"description": "List users without private information",
				"responses": {
					"200": {
						"description": "A list of all users",
						"content": {
							"application/json": {
								"schema": {
									"type": "array",
									"items": {
										"$ref": "#/components/schemas/User"
									}
								}
							}
						}
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			}
		},
		"/api/v1/users/register": {
			"post": {
				"description": "Create a new user",
				"requestBody": {
					"description": "The new user's details",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserRegistration"
							}
						}
					}
				},
				"responses": {
					"202": {
						"description": "Registration has been accepted but has yet to be completed by the user through the appropriate email link.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserRegistrationAccepted"
								}
							}
						}
					},
					"400": {
						"description": "Bad request. Check if your request was formatted correctly and that all the fields match"
					},
					"401": {
						"description": "The given email address is already in use."
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			}
		},
		"/api/v1/users/{uid}/cart": {
			"get": {
				"description": "Fetch the user's cart contents.",
				"parameters": [
					{
						"in": "path",
						"name": "uid",
						"description": "User UID",
						"required": true,
						"schema": { "type": "string" },
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					}, {
						"in": "header",
						"name": "authentication",
						"description": "Bearer Token",
						"required": true,
						"schema": { "type": "string" },
						"example": "bearer ........"
					}, {
						"in": "query",
						"required": false,
						"name": "page",
						"description": "The page's index if you want to recieve paged data. If not explicitly set, even with page 0, all items will be returned by default. Including items alone won't enable the paging.",
						"schema": {
							"type": "integer"
						},
						"example": "1",
						"allowEmptyValue": true
					}, {
						"in": "query",
						"required": false,
						"name": "items",
						"description": "How many items should be on each page.",
						"schema": {
							"type": "integer"
						},
						"example": "25",
						"allowEmptyValue": true
					}
				],
				"responses": {
					"200": {
						"description": "Successfully fetched user's cart. Returns a list of cat UIDs.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"billable": {
											"type": "object",
											"description": "Cost of all items in cart",
											"properties": {
												"amount": {
													"type": "string",
													"description": "Total cost",
													"example": "42.00"
												},
												"currency": {
													"type": "string",
													"description": "Currency used in transaciton. Always EUR (Euro)",
													"enum": ["EUR"],
													"example": "EUR"
												},
												"vat": {
													"type": "string",
													"description": "VAT in total expense, already included in amount.",
													"example": "9.24"
												}
											}
										},
										"cart": {
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/Uid"
											},
											"description": "A list of the UIDs of the cats in the cart."
										},
										"page": {
											"type": "integer",
											"description": "The current requested page relative to the amount of items per page. Not available when paging is disabled.",
											"example": 0
										},
										"viewing": {
											"type": "string",
											"description": "The range of currently shown items. Not available when paging is disabled.",
											"example": "0-24"
										},
										"totalItems": {
											"type": "integer",
											"description": "The total amount of items in the cart",
											"example": 42
										}
									}
								}
							}
						}
					},
					"401": {
						"description": "Token is not valid and the cart cannot be accessed. The token might be expired or not allowed to access the given user's private details."
					},
					"404": {
						"description": "The requested user could not be found."
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			},
			"put": {
				"description": "Add a cat to the user's cart.",
				"parameters": [
					{
						"in": "path",
						"name": "uid",
						"description": "User UID",
						"required": true,
						"schema": { "type": "string" },
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					}, {
						"in": "header",
						"name": "authentication",
						"description": "Bearer Token",
						"required": true,
						"schema": { "type": "string" },
						"example": "bearer ........"
					}
				],
				"requestBody": {
					"description": "The cat's uid that will be added to the user's cart",
					"content": {
						"applicaiton/json": {
							"schema": {
								"type": "object",
								"properties": {
									"catUid": {
										"type": "string",
										"example": "ffffffff-ffff-ffff-ffff-ffffffffffff",
										"description": "The cat's uid that will be added to the user's cart."
									}
								}
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successfully added Cat to user's cart.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"cartItems": {
											"type": "integer",
											"description": "The amount of cats in the cart",
											"example": 42
										},
										"catUid": {
											"type": "string",
											"example": "ffffffff-ffff-ffff-ffff-ffffffffffff",
											"description": "The UID of the cat that was just added."
										}
									}
								}
							}
						}
					},
					"208": {
						"description": "The cat is already in the cart",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"cartItems": {
											"type": "integer",
											"description": "The amount of cats in the cart",
											"example": 42
										},
										"catUid": {
											"type": "string",
											"example": "ffffffff-ffff-ffff-ffff-ffffffffffff",
											"description": "The UID of the cat that was just added."
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The request was formatted incorrectly."
					},
					"401": {
						"description": "Token is not valid and the cart cannot be accessed. The token might be expired or not allowed to access the given user's private details."
					},
					"403": {
						"description": "The given cat is owned by another user and cannot be bought."
					},
					"404": {
						"description": "The requested user or cat could not be found."
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			},
			"delete": {
				"description": "Delete one or more cats from the user's cart.",
				"parameters": [
					{
						"in": "path",
						"name": "uid",
						"description": "User UID",
						"required": true,
						"schema": { "type": "string" },
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					}, {
						"in": "header",
						"name": "authentication",
						"description": "Bearer Token",
						"required": true,
						"schema": { "type": "string" },
						"example": "bearer ........"
					}
				],
				"requestBody": {
					"description": "The cats to delete",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"cats": {
										"type": "array",
										"items": {
											"type": "string",
											"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
										}
									}
								}
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Cat(s) deleted from cart successfully.",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"catsRemoved": {
											"type": "integer",
											"description": "How many cats were successfully deleted"
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "The request was formatted incorrectly."
					},
					"401": {
						"description": "Token is not valid and the cart cannot be accessed. The token might be expired or not allowed to access the given user's private details."
					},
					"404": {
						"description": "The requested user or cat could not be found."
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			}
		},
		"/api/v1/users/{uid}/cart/checkout": {
			"post": {
				"description": "",
				"requestBody": {
					"description": "",
					"content": {
						"application/json": {
							"schema": {
								"type": "object",
								"properties": {
									"card": {
										"type": "object",
										"description": "Payment card details",
										"properties": {
											"number": {
												"type": "string",
												"description": "Card number, can contain spaces between digits.",
												"example": "0123 4567 8901 2345"
											},
											"cvv": {
												"type": "integer",
												"description": "Card security code",
												"example": 123
											},
											"cardholder": {
												"type": "string",
												"description": "Cardholder Name",
												"example": "Bob Bazbar"
											},
											"expiration": {
												"type": "string",
												"description": "Card expiration date in format month/year, both two digit.",
												"example": "01/29"
											}
										}
									}
								}
							}
						}
					}
				},
				"parameters": [
					{
						"in": "path",
						"name": "uid",
						"description": "User UID",
						"required": true,
						"schema": { "type": "string" },
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					}, {
						"in": "header",
						"name": "authentication",
						"description": "Bearer Token",
						"required": true,
						"schema": { "type": "string" },
						"example": "bearer ........"
					}
				],
				"responses": {
					"200": {
						"description": "Payment was successful and cats were added to user account",
						"content": {
							"application/json": {
								"schema": {
									"type": "object",
									"properties": {
										"billed": {
											"type": "object",
											"description": "Amount that was billed",
											"properties": {
												"amount": {
													"type": "string",
													"description": "Total cost billed",
													"example": "42.00"
												},
												"currency": {
													"type": "string",
													"description": "Currency used in transaciton. Always EUR (Euro)",
													"enum": ["EUR"],
													"example": "EUR"
												},
												"vat": {
													"type": "string",
													"description": "VAT in total expense, already included in amount.",
													"example": "9.24"
												}
											}
										},
										"saleUid": {
											"type": "string",
											"description": "Sale Unique Identifier",
											"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
										},
										"cats": {
											"type": "array",
											"description": "UID list of cats that were bought",
											"items": {
												"type": "string",
												"description": "Cat UID",
												"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
											}
										}
									}
								}
							}
						}
					},
					"400": {
						"description": "Invalid request."
					},
					"401": {
						"description": "Token is not valid and the cart cannot be accessed. The token might be expired or not allowed to access the given user's private details."
					},
					"402": {
						"description": "Payment failed."
					},
					"404": {
						"description": "The requested user could not be found."
					},
					"500": {
						"description": "Something went wrong on the server and the request could not be handled."
					}
				}
			}
		},
		"/": {
			"get": {
				"description": "Get one or all cats",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "The Cat's Database ID",
						"required": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Found matching Cat relative to ID or all cats if no ID was provided",
						"content": {
							"application/json": {
								"schema": {
									"oneOf": [
										{
											"type": "array",
											"items": {
												"$ref": "#/components/schemas/CatWithId"
											}
										},
										{
											"$ref": "#/components/schemas/CatWithId"
										}
									]
								}
							}
						}
					}
				}
			},
			"post": {
				"description": "Create a new Cat",
				"parameters": [
					{
						"in": "header",
						"name": "content-type",
						"description": "Request Content Type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["application/json"]
                        },
						"example": "application/json"
					}
				],
				"requestBody": {
					"description": "",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Cat"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Accepted new cat"
					}
				}
			},
			"put": {
				"description": "Update a Cat",
				"parameters": [
					{
						"in": "header",
						"name": "content-type",
						"description": "Request Content Type",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["application/json"]
						},
						"example": "application/json"
					}
				],
				"requestBody": {
					"description": "",
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CatWithId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Accepted modifications to cat"
					}
				}
			},
			"delete": {
				"description": "Delete a Cat",
				"parameters": [
					{
						"name": "id",
						"in": "query",
						"description": "The Cat's Database ID",
						"required": false,
						"schema": {
							"type": "integer"
						}
					}
				],
				"responses": {
					"200": {
						"description": "Deleted cat"
					}
				}
			}
		}
	},
	"components": {
		"schemas": {
			"Uid": {
				"type": "string",
				"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
			},
			"User": {
				"properties": {
					"uid": {
						"type": "string",
						"description": "The user's Unique ID",
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					},
					"username": {
						"type": "string",
						"description": "The user's username. ",
						"example": "Bob"
					},
					"image": {
						"type": "string",
						"description": "The user's profile picture in base64 format.",
						"example": "base64 ........"
					},
					"imageMime": {
						"type": "string",
						"enum": ["image/jpeg", "image/png", "image/gif"],
						"description": "The user's profile picture mime type",
						"example": "image/gif"
					},
					"description": {
						"type": "string",
						"description": "The user's description. Can be empty",
						"example": "I'm bob and i love cats. I live in catworld and have 2^64 cats in my house. Their names are the fibonacci sequence. Except cat number 42 whose name is Megatron."
					},
					"pronouns": {
						"type": "string",
						"description": "The user's pronouns, can be empty.",
						"example": "hee/hee"
					},
					"cats": {
						"type": "array",
						"description": "The user's cats' UIDs. Can be empty.",
						"items": {
							"type": "string",
							"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
						}
					},
					"wishlist": {
						"type": "array",
						"description": "The user's wishlisted cats UIDs. Can be empty.",
						"items": {
							"type": "string",
							"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
						}
					}

				}
			},
			"UserRegistration": {
				"type": "object",
				"required": [
					"email", "username", "password"
				],
				"properties": {
					"email": {
						"type": "string",
						"description": "The email new user's email address.",
						"example": "bob@foo.bar"
					},
					"username": {
						"type": "string",
						"description": "The username. Must be composed only by lower and uppercase letters, numbers, dashes, underscores and spaces and not be longer than 64 characters.",
						"example": "Bob"
					},
					"password": {
						"type": "string",
						"description": "The user's password. Must follow the password requirements",
						"example": "Bob.Loves.Alice.42"
					},
					"emailConfirmationBaseUrl": {
						"type": "string",
						"description": "Intended for the frontend, it's the URL that will handle the registration confirmation. Remember that the query parameter confirmationId will be appended. Include protocol and path. If not given an api url will be given instead with a JSON response.",
						"example": "https://example.com/users/confirm"
					},
					"description": {
						"type": "string",
						"description": "The user's description. Can be empty",
						"example": "I'm bob and i love cats. I live in catworld and have 2^64 cats in my house. Their names are the fibonacci sequence. Except cat number 42 whose name is Megatron."
					},
					"pronouns": {
						"type": "string",
						"description": "The user's pronouns, can be empty.",
						"example": "hee/hee"
					}
				}
			},
			"UserRegistrationAccepted": {
				"type": "object",
				"properties": {
					"username": {
						"type": "string",
						"description": "The username",
						"example": "Bob"
					},
					"email": {
						"type": "string",
						"description": "The email at which the confirmation has been sent to.",
						"example": "bob@foo.bar"
					},
					"uid": {
						"type": "string",
						"description": "The new user's UID.",
						"example": "ffffffff-ffff-ffff-ffff-ffffffffffff"
					}
				}
			},
			"CatWithId": {
				"type": "object",
				"properties": {
					"descr": {
						"type": "string",
						"example": "the father"
					},
					"id": {
						"type": "integer",
						"example": 1
					},
					"value": {
						"type": "integer",
						"example": 1000
					}
				},
				"example": {
					"descr": "the father",
					"id": 1,
					"value": 1000
				}
			},
			"Cat": {
				"type": "object",
				"properties": {
					"descr": {
						"type": "string",
						"example": "the father"
					},
					"value": {
						"type": "integer",
						"example": 1000
					}
				},
				"example": {
					"descr": "the father",
					"value": 1000
				}
			}
		}
	}
}
